{{- /*gotype: github.com/ValentinAlekhin/wb-go/internal/gen.deviceTemplateData*/ -}}

package {{.PackageName}}

import (
    "github.com/ValentinAlekhin/wb-go/pkg/control"
	"github.com/ValentinAlekhin/wb-go/pkg/basedevice"
    "github.com/ValentinAlekhin/wb-go/pkg/mqtt"
    "sync"
)

type {{.DeviceControlsStructName}} struct {
{{range .Controls}} {{.Name}} *control.{{.StructName}}
{{end}}}

type {{.DeviceStructName}} struct {
	name          string
	Controls      *{{.DeviceControlsStructName}}
}

func (w *{{.DeviceStructName}}) GetInfo() basedevice.Info {
	return basedevice.Info{
		Name:         w.name,
		ControlsInfo: basedevice.GetControlsInfo(w.Controls),
	}
}

var (
	once{{.DeviceStructName}}    sync.Once
	instance{{.DeviceStructName}} *{{.DeviceStructName}}
)

func New{{.DeviceStructName}}(client mqtt.ClientInterface) *{{.DeviceStructName}} {
	once{{.DeviceStructName}}.Do(func() {
		name := "{{.DeviceName}}"

        controlList := &{{.DeviceControlsStructName}}{
        {{range .Controls}} {{.Name}}: control.New{{.StructName}}(client, name, "{{.Mqtt}}", control.Meta{
			Type:      "{{.Meta.Type}}",
			{{if .Meta.Units}} Units: "{{.Meta.Units}}", {{end}}
			{{if .Meta.Max}} Max: {{.Meta.Max}}, {{ end }}
			{{if .Meta.Min}} Min: {{.Meta.Min}}, {{ end }}
			{{if .Meta.Precision}} Min: {{.Meta.Precision}}, {{ end }}
			Order:     {{.Meta.Order}},
			ReadOnly:  {{.Meta.ReadOnly}},
			Title:     control.MultilingualText{ {{range $key, $value := .Meta.Title}} "{{$key}}": `{{$value}}`, {{end}} },
			}),
        {{end}}}


        instance{{.DeviceStructName}} = &{{.DeviceStructName}}{
            name:      name,
            Controls:  controlList,
        }
    })


	return instance{{.DeviceStructName}}
}
