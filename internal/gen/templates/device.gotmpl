{{- /*gotype: github.com/ValentinAlekhin/wb-go/internal/gen.deviceTemplateData*/ -}}

package {{.PackageName}}

import (
    "fmt"
    "github.com/ValentinAlekhin/wb-go/pkg/controls"
    "github.com/ValentinAlekhin/wb-go/pkg/mqtt"
    "sync"
)

type {{.DeviceControlsStructName}} struct {
{{range .Controls}} {{.Name}} *controls.{{.StructName}}
{{end}}}

type {{.DeviceStructName}} struct {
	Name          string
	Controls      *{{.DeviceControlsStructName}}
}

var (
	once{{.DeviceStructName}}    sync.Once
	instance{{.DeviceStructName}} *{{.DeviceStructName}}
)

func New{{.DeviceStructName}}(client *mqtt.Client) *{{.DeviceStructName}} {
	once{{.DeviceStructName}}.Do(func() {
        deviceName := fmt.Sprintf("%s_%s", "{{.DeviceName}}", "{{.ModbusAddress}}")
        controlList := &{{.DeviceControlsStructName}}{
        {{range .Controls}} {{.Name}}: controls.New{{.StructName}}(client, deviceName, "{{.Mqtt}}"),
        {{end}}}


        instance{{.DeviceStructName}} = &{{.DeviceStructName}}{
            Name:      deviceName,
            Controls:  controlList,
        }
    })


	return instance{{.DeviceStructName}}
}
