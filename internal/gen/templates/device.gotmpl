{{- /*gotype: github.com/ValentinAlekhin/wb-go/internal/gen.deviceTemplateData*/ -}}

package {{.PackageName}}

import (
    "fmt"
    "github.com/ValentinAlekhin/wb-go/pkg/controls"
    "github.com/ValentinAlekhin/wb-go/pkg/mqtt"
	"reflect"
    "sync"
)

type {{.DeviceControlsStructName}} struct {
{{range .Controls}} {{.Name}} *controls.{{.StructName}}
{{end}}}

type {{.DeviceStructName}} struct {
	Name          string
	Address       string
	Controls      *{{.DeviceControlsStructName}}
}

func (w *{{.DeviceStructName}}) GetControlsInfo() []controls.ControlInfo {
	var infoList []controls.ControlInfo

	// Получаем значение и тип структуры Controls
	controlsValue := reflect.ValueOf(w.Controls).Elem()
	controlsType := controlsValue.Type()

	// Проходимся по всем полям структуры Controls
	for i := 0; i < controlsValue.NumField(); i++ {
		field := controlsValue.Field(i)

		// Проверяем, что поле является указателем и не nil
		if field.Kind() == reflect.Ptr && !field.IsNil() {
			// Проверяем, реализует ли поле метод GetInfo
			method := field.MethodByName("GetInfo")
			if method.IsValid() {
				// Вызываем метод GetInfo
				info := method.Call(nil)[0].Interface().(controls.ControlInfo)
				infoList = append(infoList, info)
			} else {
				fmt.Printf("Field %s does not implement GetInfo\n", controlsType.Field(i).Name)
			}
		}
	}

	return infoList
}

var (
	once{{.DeviceStructName}}    sync.Once
	instance{{.DeviceStructName}} *{{.DeviceStructName}}
)

func New{{.DeviceStructName}}(client *mqtt.Client) *{{.DeviceStructName}} {
	once{{.DeviceStructName}}.Do(func() {
        deviceName := fmt.Sprintf("%s_%s", "{{.DeviceName}}", "{{.ModbusAddress}}")
        controlList := &{{.DeviceControlsStructName}}{
        {{range .Controls}} {{.Name}}: controls.New{{.StructName}}(client, deviceName, "{{.Mqtt}}"),
        {{end}}}


        instance{{.DeviceStructName}} = &{{.DeviceStructName}}{
            Name:      deviceName,
            Address:   "{{.ModbusAddress}}",
            Controls:  controlList,
        }
    })


	return instance{{.DeviceStructName}}
}
